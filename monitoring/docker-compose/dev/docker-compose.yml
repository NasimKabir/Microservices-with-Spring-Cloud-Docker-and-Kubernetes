services:
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../obserability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      nasim_network:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../obserability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../obserability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
        - ../obserability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../obserability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:latest
    volumes:
      - ../obserability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: nasimkabir/config_server:v13
    container_name: configserver
    hostname: configserver
    environment:
      - SPRING_APPLICATION_NAME=configserver
      - SERVICE_NAME=configserver
    ports:
      - "8071:8071"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8071/actuator/health || exit 1" ]
      #      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-base-config


  eurekaserver:
    image: nasimkabir/eureka_server:v4
    container_name: eurekaserver
    hostname: eurekaserver
    environment:
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    ports:
      - "8761:8761"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]
      #      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-base-config

  accounts:
    image: "nasimkabir/accounts_service:v13"
    container_name: accounts_service
    hostname: accounts-service
    environment:
      - SPRING_APPLICATION_NAME=accounts-service
      - SERVICE_NAME=accounts-service

    ports:
      - "8081:8081"
    depends_on:
      eurekaserver:
        condition: service_healthy
      configserver:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1" ]
      #      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
    image: "nasimkabir/loans_service:v13"
    container_name: loans_service
    hostname: loans-service
    environment:
      - SPRING_APPLICATION_NAME=loans-service
      - SERVICE_NAME=loans-service
    ports:
      - "8090:8090"
    depends_on:
      eurekaserver:
        condition: service_healthy
      configserver:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8090/actuator/health || exit 1" ]
      #      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  cards:
    image: "nasimkabir/cards_service:v13"
    container_name: cards_service
    hostname: cards-service
    environment:
      - SPRING_APPLICATION_NAME=cards-service
      - SERVICE_NAME=cards-service
    ports:
      - "9000:9000"
    depends_on:
      eurekaserver:
        condition: service_healthy
      configserver:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/actuator/health || exit 1" ]
      #      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  api-gateway:
    image: "nasimkabir/api-gateway-server:v2"
    container_name: api-gateway-server
    hostname: api-gateway-server
    environment:
      - SPRING_APPLICATION_NAME=api-gateway-server
      - SERVICE_NAME=api-gateway-server
    #      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE= "http://eurekaserver:8761/eureka/"
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      loans:
        condition: service_healthy
      cards:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config


networks:
  nasim_network:
    driver: bridge
    attachable: true